       Root User: adminnr1up7V
   Root Password: qm1zmQxcZY1t
   Database Name: op
   
   
   Username: adminnr1up7V
       Password: qm1zmQxcZY1t
  Database Name: op
 Connection URL: mysql://mysql:3306/

 jdbc:mysql://mysql:3306/op
 
 
## OP ##
statutesrsservice=http://rs.opca.svc.cluster.local:8080/statutesrs/rs/
GC_MAX_METASPACE_SIZE=256M
MYSQL_USER
MYSQL_DATABASE
MYSQL_PASSWORD
 
## GS ##
 
 
 
 exec java -javaagent:/opt/jolokia/jolokia.jar=config=/opt/jolokia/etc/jolokia.properties 
 -Xms512m -Xmx512m 
 -XX:+UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 
 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 
 -XX:MaxMetaspaceSize=256m 
 -XX:ParallelGCThreads=2 
 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 
 -XX:CICompilerCount=2 
 -XX:+ExitOnOutOfMemoryError -cp . -jar /deployments/opinions-web-swarm.jar
 
 
 -javaagent:/opt/jolokia/jolokia.jar=config=/opt/jolokia/etc/jolokia.properties 
 -Xms64m -Xmx256m 
 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap 
 -XX:+UseParallelOldGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MaxMetaspaceSize=100m -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -XX:CICompilerCount=2 -XX:+ExitOnOutOfMemoryError -cp . -jar /deployments/guidedsearch-rs-rs-0.3.0-swarm.jar
 
 exec java 
   -javaagent:/opt/jolokia/jolokia.jar=config=/opt/jolokia/etc/jolokia.properties 
   -Xms512m # -Xmssize Sets the initial size (in bytes) of the heap. 
   			# This value must be a multiple of 1024 and greater than 1 MB. 
   			# Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes.
   -Xmx512m # -Xmxsize Specifies the maximum size (in bytes) of the memory allocation pool in bytes. 
   			# This value must be a multiple of 1024 and greater than 2 MB. 
   			# Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes. 
   			# The default value is chosen at runtime based on system configuration. 
   			# For server deployments, -Xms and -Xmx are often set to the same value. 
   			# See the section "Ergonomics" in Java SE HotSpot Virtual Machine Garbage Collection Tuning Guide at 
   			# http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html. 
   -XX:+UseParallelGC # Enables the use of the parallel scavenge garbage collector (also known as the throughput collector) 
   					  # to improve the performance of your application by leveraging multiple processors.
					  # By default, this option is disabled and the collector is chosen automatically based on the configuration of the 
					  # machine and type of the JVM. 
					  # If it is enabled, then the -XX:+UseParallelOldGC option is automatically enabled, unless you explicitly disable it.
					  
   -XX:ParallelGCThreads=2  # Sets the number of threads used for parallel garbage collection in the young and old generations. 
                            # The default value depends on the number of CPUs available to the JVM 
   
   -XX:MinHeapFreeRatio=20 # Sets the minimum allowed percentage of free heap space (0 to 100) after a GC event. 
                           # If free heap space falls below this value, then the heap will be expanded. 
                           # By default, this value is set to 40%. 
   -XX:MaxHeapFreeRatio=40 # Sets the maximum allowed percentage of free heap space (0 to 100) after a GC event. 
   						   # If free heap space expands above this value, then the heap will be shrunk. By default, this value is set to 70%. 
   -XX:GCTimeRatio=4      # No definition 
   -XX:AdaptiveSizePolicyWeight=90 # no definition
   -XX:MaxMetaspaceSize=256m  # Sets the maximum amount of native memory that can be allocated for class metadata. 
   							  # By default, the size is not limited. The amount of metadata for an application depends on the application itself, 
   							  # other running applications, and the amount of memory available on the system.
   -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 
   -XX:CICompilerCount=2    # Sets the number of compiler threads to use for compilation. 
   							#By default, the number of threads is set to 2 for the server JVM, to 1 for the client JVM, 
   							# and it scales to the number of cores if tiered compilation is used.  
   -XX:+ExitOnOutOfMemoryError 
   -cp . -jar /deployments/opinions-web-swarm.jar
   
   
JAVA_MAX_MEM_RATIO
  It is used when no -Xmx option is given in JAVA_OPTIONS. This is used to calculate a default maximal Heap Memory based on a containers restriction. If used in a Docker container without any memory constraints for the container then this option has no effect. If there is a memory constraint then -Xmx is set to a ratio of the container available memory as set here. The default is 50 which means 50% of the available memory is used as an upper boundary. You can skip this mechanism by setting this value to 0 in which case no -Xmx option is adde

CONTAINER_MAX_MEMORY 
  Memory limit given to the container. This value must be in bytes.
      
GC_MAX_METASPACE_SIZE
  The maximum metaspace size. 
   
   
For many Java workloads, the JVM heap is the largest single consumer of memory. 
Currently, the OpenJDK defaults to allowing up to 1/4 (1/-XX:MaxRAMFraction) of the compute nodeâ€™s memory to be used for the heap, 
regardless of whether the OpenJDK is running in a container or not. 
It is therefore essential to override this behaviour, especially if a container memory limit is also set.

There are at least two ways the above can be achieved:
1) If the container memory limit is set and the experimental options are supported by the JVM, 
set 
-XX:+UnlockExperimentalVMOptions 
-XX:+UseCGroupMemoryLimitForHeap.

This sets -XX:MaxRAM to the container memory limit, and the maximum heap size (-XX:MaxHeapSize / -Xmx) to 1/-XX:MaxRAMFraction (1/4 by default).

2) Directly override one of -XX:MaxRAM, -XX:MaxHeapSize or -Xmx.
This option involves hard-coding a value, but has the advantage of allowing a safety margin to be calculated.   
  
   logging:
    root-logger:
      level: DEBUG
    console-handler:
      level: DEBUG
    loggers:
      com:
        level: INFO
      javax:
        level: INFO
      io:
        level: INFO
      org.jboss:
        level: DEBUG
      org.hibernate:
        level: INFO
      org.apache:
        level: INFO
      org.infinispan:
        level: INFO
      org.xnio:
        level: INFO
      org.jboss.as:
        level: INFO
      org.jboss.jca:
        level: INFO
      org.jboss.modules:
        level: INFO
      org.jboss.weld:
        level: INFO
      org.jboss.resteasy:
        level: INFO
      org.jboss.resteasy:
        level: INFO
 